

==========================================================================


#include <iostream>
#include <vector>
#include <queue>
#include "save.h"

// BFS (breath first search) 너비
// BFS = 큐

struct Vertex
{
	// int data;
};

std::vector<Vertex> vertices;
std::vector<std::vector<int>> adjacent;

// 내가 발견한 목록을 추적하기 위해
std::vector<bool> discovered;

void CreateGraph()
{
	vertices.resize(6);

	// 인접 리스트
	adjacent = std::vector<std::vector<int>>(6);
	adjacent[0] = { 1, 3 };
	adjacent[1] = { 0, 2, 3 };
	adjacent[3] = { 4 };
	adjacent[5] = { 4 };

	// 인접 행렬
	/*adjacent = std::vector<std::vector<int>>
	{
		{ 0, 1, 0, 1, 0, 0 },
		{ 1, 0, 1, 1, 0, 0 },
		{ 0, 0, 0, 0, 0, 0 },
		{ 0, 0, 0, 0, 1, 0 },
		{ 0, 0, 0, 0, 0, 0 },
		{ 0, 0, 0, 0, 1, 0 },
	};*/
}



void Bfs(int here)
{
	std::queue<int> q;
	q.push(here);	// 넣는 다는 건 발견했다는 것
	discovered[here] = true;	// 이므로 true로 바꿔준다

	while (!q.empty())
	{
		here = q.front();
		q.pop();

		// 방문 도장
		std::cout << "Visited : " << here << std::endl;

		int size = adjacent[here].size();
		for (int i = 0; i < size; ++i)
		{
			int there = adjacent[here][i];
			if (discovered[there])	// 이미 방문한 곳이라면 넘어간다
				continue;

			q.push(there);
			discovered[there] = true;
		}
	}
}

int main()
{
	CreateGraph();

	discovered = std::vector<bool>(6, false);
	Bfs(0);

	save("cpp.cpp");
}

// 처음에는 많이 헷갈리니까 코드를 보고 그림 그려보기