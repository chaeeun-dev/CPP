

==========================================================================


#include <iostream>
#include <vector>
#include "save.h"

void CreateGraph_1()
{
	struct Vertex
	{
		// int data;
		std::vector<Vertex> edges;
	};

	std::vector<Vertex> v;
	v.resize(6);	// size와 연관 - push_back을 6번 한 것
	v.reserve(6);	// capacity와 연관 - 데이터는 채워지지 않지만, 영역을 확보

	// 벡터의 초기화 방법
	// std::vector<int> v1(개수);
	// std::vector<int> v2(개수, 초기화 할 값);
	// std::vector<int> v3{ 1,2,3,4,5,6 };
}

int main()
{
	save("cpp.cpp");
}

==========================================================================


#include <iostream>
#include <vector>
#include "save.h"

// 정점이 100개
// - 지하철 노선도 -> 서로 드문 드문 연결 - 인접 리스트 적합
// - 페이스북 친구 -> 서로 빽빽하게 연결 - 인접 리스트에 부적합..?
// 

// 인접 리스트 : 실제 연결된 애들만 넣어준다
void CreateGraph2()
{
	struct Vertex
	{
		int data;
	};

	std::vector<Vertex> v(6);

	std::vector<std::vector<int>> adjacent;		// 이중 벡터
	adjacent.resize(6);
	
	//adjacent[0].push_back(1);
	//adjacent[0].push_back(3);
	adjacent[0] = { 1, 3 };
	adjacent[1] = { 0, 2, 3 };
	adjacent[3] = { 4 };
	adjacent[5] = { 4 };

	// Q) 0번 -> 3번 연결되어 있나요?
	bool connected = false;
	int size = adjacent[0].size();
	for (int i = 0; i < size; ++i)
	{
		int vertex = adjacent[0][i];
		if (vertex == 3)
			connected = true;
	}
}

int main()
{
	save("cpp.cpp");
}

==========================================================================


#include <iostream>
#include <vector>
#include "save.h"

// 정점이 100개
// - 지하철 노선도 -> 서로 드문 드문 연결 - 인접 리스트 적합
// - 페이스북 친구 -> 서로 빽빽하게 연결 - 인접 리스트에 부적합..?
// 

// 인접 리스트 : 실제 연결된 애들만 넣어준다
void CreateGraph2()
{
	struct Vertex
	{
		int data;
	};

	std::vector<Vertex> v(6);

	std::vector<std::vector<int>> adjacent;		// 이중 벡터
	adjacent.resize(6);
	
	//adjacent[0].push_back(1);
	//adjacent[0].push_back(3);
	adjacent[0] = { 1, 3 };
	adjacent[1] = { 0, 2, 3 };
	adjacent[3] = { 4 };
	adjacent[5] = { 4 };

	// Q) 0번 -> 3번 연결되어 있나요?
	bool connected = false;
	int size = adjacent[0].size();
	for (int i = 0; i < size; ++i)
	{
		int vertex = adjacent[0][i];
		if (vertex == 3)
			connected = true;
	}
}

// 인접 행렬
void CreateGraph_3()
{
	struct Vertex
	{
		int data;
	};
	
	std::vector<Vertex> v(6);

	// 연결된 목록을 행렬로 관리
	// [X][O][X][O][X][X]
	// [O][X][O][O][X][X]
	// [X][X][X][X][X][X]
	// [X][X][X][X][O][X]
	// [X][X][X][X][X][X]
	// [X][X][X][X][O][X]

	// adjacent[from][to] ?
	// 행렬을 이용한 그래프 표현
	// 메모리 소모 심하지만, 빠른 접근
	std::vector<std::vector<bool>> adjacent(6, std::vector<bool>(6, false));
	adjacent[0][1] = true;
	adjacent[0][3] = true;
	adjacent[1][0] = true;
	adjacent[1][2] = true;
	adjacent[1][3] = true;
	adjacent[3][4] = true;
	adjacent[5][4] = true;

	// Q) 0번 -> 3번 연결되어 있나요?
	bool connected = adjacent[0][3]; 

	std::vector<std::vector<int>> adjacent2 =
	{
		{-1,15,-1,35,-1,-1},
		{15,-1,+5,10,-1,-1},
		{-1,+5,-1,-1,-1,-1},
		{35,10,-1,-1,+5,-1},
		{-1,-1,-1,-1,+5,-1},
	};
}

int main()
{
	save("cpp.cpp");
}