

==========================================================================


#include <iostream>
#include <vector>
#include <queue>
#include "save.h"
using namespace std;

// 다익스트라
// BFS는 먼저 등록한 것을 꺼냄
// 다익스트라는 지금까지 등록한 것 중에서 가장 좋은 것 꺼냄 -> 우선순위큐
// 사실상 BFS와 많이 비슷하다

struct Vertex
{
	// int data;
};

vector<Vertex> vertices;
vector<vector<int>> adjacent;

void CreateGraph()
{
	vertices.resize(6);

	adjacent = vector<vector<int>>(6, vector<int>(6, -1));
	adjacent[0][1] = adjacent[1][0] = 15;
	adjacent[0][3] = adjacent[3][0] = 35;
	adjacent[1][2] = adjacent[2][1] =  5;
	adjacent[1][3] = adjacent[3][1] = 10;
	adjacent[3][4] = adjacent[4][3] = 5;
	adjacent[5][4] = adjacent[4][5] = 5;
}

struct VertexCost
{
	VertexCost(int cost, int vertex) : cost(cost), vertex(vertex) { }

	bool operator<(const VertexCost& other) const
	// const 붙이면 완전 다른 함수로 인식, 함수에서 ++cost 이런 작업 못하도록
	{
		return cost < other.cost;
	}

	bool operator>(const VertexCost& other) const
	{
		return cost > other.cost;
	}

	int cost;
	int vertex;
};

void Dijkstra(int here)
{
	priority_queue<VertexCost, vector<VertexCost>, greater<VertexCost>> pq;
	vector<int> best(6, INT32_MAX);	// 처음에는 가장 큰 값을 넣음
	vector<int> parent(6, -1);	// 추적하기 위한

	pq.push(VertexCost(0, here));	// 우선순위 큐에 시작점 넣기
	best[here] = 0;		// 처음에는 이동 cost가 0
	parent[here] = here;

	while (!pq.empty())
	{
		// 제일 좋은 후보를 찾는다
		VertexCost v = pq.top();
		pq.pop();

		int cost = v.cost;
		here = v.vertex;

		// 더 많은 경로를 뒤늦게 찾았다면 스킵
		if (best[here] < cost)
			continue;

		// 방문
		cout << "방문!" << here << endl;

		for (int there = 0; there < 6; ++there)
		{
			// 연결되지 않았으면 스킵
			if (adjacent[here][there] == -1)
				continue;

			// 더 좋은 경로를 과거에 찾았으면 스킵
			int nextCost = best[here] + adjacent[here][there];
			if (nextCost >= best[there])
				continue;

			// 지금까지 찾은 경로 중에서는 최선의 수치 = 갱신
			best[there] = nextCost;
			parent[there] = here;
			pq.push(VertexCost(nextCost, there));
		}
	}

}
int main()
{
	CreateGraph();

	Dijkstra(0);

	save("cpp.cpp");
}

// 출력 결과
// 방문!0
// 방문!1
// 방문!2
// 방문!3
// 방문!4
// 방문!5


// Dijikstra = BFS + 양념(const)
// - BFS = queue
// - Dijikstra = priority_queue
// 부족한 것? 목적지 개념을 모름 