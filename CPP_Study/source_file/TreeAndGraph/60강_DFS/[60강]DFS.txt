

==========================================================================
fileName ::, 2024-08-01 목요일 오후 9:58:24
==========================================================================


#include <iostream>
#include <vector>
#include "save.h"

// DFS (depth first search) - 계속 안으로 파고들기
// DFS = 재귀함수
// BFS = 

struct Vertex
{
	// int data;
};

std::vector<Vertex> vertices;
std::vector<std::vector<int>> adjacent;

// 내가 방문한 목록을 추적하기 위해
std::vector<bool> visited;

void CreateGraph()
{
	vertices.resize(6);

	// 인접 리스트
	adjacent = std::vector<std::vector<int>>(6);
	adjacent[0] = { 1, 3 };
	adjacent[1] = { 0, 2, 3 };
	adjacent[3] = { 4 };
	adjacent[5] = { 4 };

	// 인접 행렬
}

void Dfs(int here)
{
	// 방문 도장 찍기
	visited[here] = true;
	std::cout << "Visited : " << here << std::endl;

	// 인접한 길을 다 체크해서 안으로 타고 들어가기
	const int size = adjacent[here].size();
	for (int i = 0; i < size; ++i)
	{
		int there = adjacent[here][i];
		if (visited[there] == false)
			Dfs(there);
	}
}

int main()
{
	CreateGraph();
	
	visited = std::vector<bool>(6, false);
	Dfs(0);

	save("cpp.cpp");
}
// 출력 결과
// Visited : 0
// Visited : 1
// Visited : 2
// Visited : 3
// Visited : 4

// 0 -> 1 -> 2, 3
// -> 3 3은 방문 도장 찍혔으니 패스

==========================================================================
fileName ::, 2024-08-01 목요일 오후 10:15:07
==========================================================================


#include <iostream>
#include <vector>
#include "save.h"

// DFS (depth first search) - 계속 안으로 파고들기
// DFS = 재귀함수 = 스택
// BFS = 

struct Vertex
{
	// int data;
};

std::vector<Vertex> vertices;
std::vector<std::vector<int>> adjacent;

// 내가 방문한 목록을 추적하기 위해
std::vector<bool> visited;

void CreateGraph()
{
	vertices.resize(6);

	// 인접 리스트
	//adjacent = std::vector<std::vector<int>>(6);
	//adjacent[0] = { 1, 3 };
	//adjacent[1] = { 0, 2, 3 };
	//adjacent[3] = { 4 };
	//adjacent[5] = { 4 };

	// 인접 행렬
	adjacent = std::vector<std::vector<int>>
	{
		{ 0, 1, 0, 1, 0, 0 },
		{ 1, 0, 1, 1, 0, 0 },
		{ 0, 0, 0, 0, 0, 0 },
		{ 0, 0, 0, 0, 1, 0 },
		{ 0, 0, 0, 0, 0, 0 },
		{ 0, 0, 0, 0, 1, 0 },
	};
}

void Dfs(int here)
{
	// 방문 도장 찍기
	visited[here] = true;
	std::cout << "Visited : " << here << std::endl;

	// 인접한 길을 다 체크해서 안으로 타고 들어가기

	// 인접 리스트
	/*const int size = adjacent[here].size();
	for (int i = 0; i < size; ++i)
	{
		int there = adjacent[here][i];
		if (visited[there] == false)
			Dfs(there);
	}*/
	
	// 인접 행렬
	for (int there = 0; there < 6; ++there)
	{
		// 길은 있는지
		if (adjacent[here][there] == 0)
			continue;

		// 아직 방문하지 않은 곳에 한해서 방문
		if (!visited[there])
			Dfs(there);
	}

}

int main()
{
	CreateGraph();
	
	visited = std::vector<bool>(6, false);
	Dfs(0);

	save("cpp.cpp");
}
// 출력 결과
// Visited : 0
// Visited : 1
// Visited : 2
// Visited : 3
// Visited : 4
// 5번이 없다 -> 연결되어 있는 애들만 스캔했기 때문
// 모든 점들을 탐색하려면, 따로 함수를 만들어야 한다.



==========================================================================
fileName ::, 2024-08-01 목요일 오후 10:53:46
==========================================================================


#include <iostream>
#include <vector>
#include "save.h"

// DFS (depth first search) - 계속 안으로 파고들기
// DFS = 재귀함수 = 스택
// BFS = 

struct Vertex
{
	// int data;
};

std::vector<Vertex> vertices;
std::vector<std::vector<int>> adjacent;

// 내가 방문한 목록을 추적하기 위해
std::vector<bool> visited;

void CreateGraph()
{
	vertices.resize(6);

	// 인접 리스트
	//adjacent = std::vector<std::vector<int>>(6);
	//adjacent[0] = { 1, 3 };
	//adjacent[1] = { 0, 2, 3 };
	//adjacent[3] = { 4 };
	//adjacent[5] = { 4 };

	// 인접 행렬
	adjacent = std::vector<std::vector<int>>
	{
		{ 0, 1, 0, 1, 0, 0 },
		{ 1, 0, 1, 1, 0, 0 },
		{ 0, 0, 0, 0, 0, 0 },
		{ 0, 0, 0, 0, 1, 0 },
		{ 0, 0, 0, 0, 0, 0 },
		{ 0, 0, 0, 0, 1, 0 },
	};
}

void Dfs(int here)
{
	// 방문 도장 찍기
	visited[here] = true;
	std::cout << "Visited : " << here << std::endl;

	// 인접한 길을 다 체크해서 안으로 타고 들어가기

	// 인접 리스트
	/*const int size = adjacent[here].size();
	for (int i = 0; i < size; ++i)
	{
		int there = adjacent[here][i];
		if (visited[there] == false)
			Dfs(there);
	}*/
	
	// 인접 행렬
	for (int there = 0; there < 6; ++there)
	{
		// 길은 있는지
		if (adjacent[here][there] == 0)
			continue;

		// 아직 방문하지 않은 곳에 한해서 방문
		if (!visited[there])
			Dfs(there);
	}

}

void DfsAll()
{
	visited = std::vector<bool>(6, false);

	for (int i = 0; i < 6; ++i)
	{
		if (!visited[i])
		{
			Dfs(i);
			std::cout << "Dfs Call" << std::endl;
		}
	}
}

int main()
{
	CreateGraph();
	DfsAll();

	save("cpp.cpp");
}
// 출력 결과
// Visited : 0
// Visited : 1
// Visited : 2
// Visited : 3
// Visited : 4
// Dfs Call
// Visited : 5
// Dfs Call


==========================================================================
fileName ::, 2024-08-01 목요일 오후 11:02:19
==========================================================================


#include <iostream>
#include <vector>
#include "save.h"

// DFS (depth first search) - 계속 안으로 파고들기
// DFS = 재귀함수 = 스택
// BFS = 

struct Vertex
{
	// int data;
};

std::vector<Vertex> vertices;
std::vector<std::vector<int>> adjacent;

// 내가 방문한 목록을 추적하기 위해
std::vector<bool> visited;

void CreateGraph()
{
	vertices.resize(6);

	// 인접 리스트
	//adjacent = std::vector<std::vector<int>>(6);
	//adjacent[0] = { 1, 3 };
	//adjacent[1] = { 0, 2, 3 };
	//adjacent[3] = { 4 };
	//adjacent[5] = { 4 };

	// 인접 행렬
	adjacent = std::vector<std::vector<int>>
	{
		{ 0, 1, 0, 1, 0, 0 },
		{ 1, 0, 1, 1, 0, 0 },
		{ 0, 0, 0, 0, 0, 0 },
		{ 0, 0, 0, 0, 1, 0 },
		{ 0, 0, 0, 0, 0, 0 },
		{ 0, 0, 0, 0, 1, 0 },
	};
}

void Dfs(int here)
{
	// 방문 도장 찍기
	visited[here] = true;
	std::cout << "Visited : " << here << std::endl;

	// 인접한 길을 다 체크해서 안으로 타고 들어가기

	// 인접 리스트 O(V+E)
	/*const int size = adjacent[here].size();
	for (int i = 0; i < size; ++i)
	{
		int there = adjacent[here][i];
		if (visited[there] == false)
			Dfs(there);
	}*/
	
	// 인접 행렬 O(V^2)
	for (int there = 0; there < 6; ++there)
	{
		// 길은 있는지
		if (adjacent[here][there] == 0)
			continue;

		// 아직 방문하지 않은 곳에 한해서 방문
		if (!visited[there])
			Dfs(there);
	}

}

void DfsAll()
{
	visited = std::vector<bool>(6, false);

	for (int i = 0; i < 6; ++i)
	{
		if (!visited[i])
		{
			Dfs(i);
			std::cout << "Dfs Call" << std::endl;
		}
	}
}

int main()
{
	CreateGraph();
	DfsAll();

	save("cpp.cpp");
}

// 지금은 길찾기가 목표