

==========================================================================


#include <iostream>
#include <algorithm>
#include "save.h"
using namespace std;


int main()
{
	vector<int> v;

	for (int i = 0; i < 100; ++i)
	{
		int n = rand() % 100;
		v.push_back(n);
	}

	// 특정 숫자가 있는지?
	// 이렇게 적는 사람도 많지만...
	// 다른 방법을 사용해보자
	{
		int number = 50;
		
		vector<int>::iterator it;
		for (it = v.begin(); it != v.end(); ++it)
		{
			int value = *it;
			if (value == number)
			{
				break;
			}
		}

		if (it == v.end())
		{

		}
	}
	save("cpp.cpp");
}


==========================================================================


#include <iostream>
#include <algorithm>
#include "save.h"
using namespace std;


int main()
{
	vector<int> v;

	for (int i = 0; i < 100; ++i)
	{
		int n = rand() % 100;
		v.push_back(n);
	}

	// 특정 숫자가 있는지?
	// 이렇게 적는 사람도 많지만...
	// 다른 방법을 사용해보자
	{
		int number = 50;
		//
		//vector<int>::iterator it;
		//for (it = v.begin(); it != v.end(); ++it)
		//{
		//	int value = *it;
		//	if (value == number)
		//	{
		//		break;
		//	}
		//}

		// 완전히 동일한 코드 - 오로지 가독성의 차이!
		auto it = std::find(v.begin(), v.end(), number);
		if (it == v.end())
		{
			cout << "못찾음" << endl;
		}
		else
		{
			cout << "찾음" << endl;
		}
	}
	save("cpp.cpp");
}


==========================================================================


#include <iostream>
#include <algorithm>
#include "save.h"
using namespace std;


int main()
{
	vector<int> v;

	for (int i = 0; i < 100; ++i)
	{
		int n = rand() % 100;
		v.push_back(n);
	}

	// 11로 나뉘는 숫자가 있는지?
	{
		// 방법 1
		int div = 11;
		vector<int>::iterator it;
		for (it = v.begin(); it != v.end(); ++it)
		{
			int value = *it;
			if (value % 11 == 0)
			{
				break;
			}
		}


		// 방법 2
		struct CanDivideBy11
		{
			bool operator()(int n)
			{
				return n % 11 == 0;
			}
		};

		std::find_if(v.begin(), v.end(), CanDivideBy11());		// 인자1, 인자2, 조건<- 람다로 쓰는 게 좋지만 이번은
	}

	save("cpp.cpp");
}


==========================================================================


#include <iostream>
#include <algorithm>
#include "save.h"
using namespace std;

// find <<
// find_if <<

// count <<
// count_if <<

// all_of
// any_of
// none_of

int main()
{
	vector<int> v;

	for (int i = 0; i < 100; ++i)
	{
		int n = rand() % 100;
		v.push_back(n);
	}

	// 1) 홀수인 숫자 개수는?
	{
		// 방법 1
		int count = 0;

		for (auto it = v.begin(); it != v.end(); it++)
		{
			if (*it % 2 != 0)
				count++;
		}

		// 방법 2
		struct IsOdd
		{
			bool operator()(int n)
			{
				return n % 2 != 0;
			}
		};
		int n = std::count_if(v.begin(), v.end(), IsOdd());

		// 2) 모든 데이터가 홀수입니까?
		bool b1 = std::all_of(v.begin(), v.end(), IsOdd());

		// 3) 홀수인 데이터가 하나라도 있습니까?
		bool b2 = std::any_of(v.begin(), v.end(), IsOdd());

		// 4) 모든 데이터가 홀수가 아닙니까?
		bool b3 = std::none_of(v.begin(), v.end(), IsOdd());
	}
	save("cpp.cpp");
}


==========================================================================


#include <iostream>
#include <algorithm>
#include "save.h"
using namespace std;

// find <<
// find_if <<

// count <<
// count_if <<

// all_of
// any_of
// none_of

int main()
{
	vector<int> v;

	for (int i = 0; i < 100; ++i)
	{
		int n = rand() % 100;
		v.push_back(n);
	}

	// 벡터에 있는 모든 숫자들에 3을 곱해주세요
	{
		// 방법 1
		for (int i = 0; i < v.size(); ++i)
		{
			v[i] *= 3;
		}

		// 방법 2
		struct MultuplyBy3
		{
			void operator()(int& n)
			{
				n *= 3;
			}
		};

		std::for_each(v.begin(), v.end(), MultuplyBy3());
	}

	save("cpp.cpp");
}




==========================================================================


#include <iostream>
#include <algorithm>
#include "save.h"
using namespace std;

// find <<
// find_if <<

// count <<
// count_if <<

// all_of
// any_of
// none_of

// for_each <<

// 굉장히 주의해야 하는 함수
// remove
// remove_if <<
int main()
{
	vector<int> v = { 1,4,3,5,8,2 };

	// 홀수인 데이터를 일괄 삭제

	// 방법 1
	
	for (auto it = v.begin(); it != v.end(); it++)
	{
		if (*it % 2 != 0)
			v.erase(it);	// 이 방법은 위험하다
	}
	
	save("cpp.cpp");
}


==========================================================================


#include <iostream>
#include <algorithm>
#include "save.h"
using namespace std;

// find <<
// find_if <<

// count <<
// count_if <<

// all_of
// any_of
// none_of

// for_each <<

// 굉장히 주의해야 하는 함수
// remove
// remove_if <<
int main()
{
	vector<int> v = { 1,4,3,5,8,2 };

	// 홀수인 데이터를 일괄 삭제

	// 방법 1
	for (auto it = v.begin(); it != v.end();)
	{
		// 이렇게 까다로운 방법으로 삭제..
		if (*it % 2 != 0)
			it = v.erase(it);
		else
			it++;
	}
	
	// 방법 2
	struct IsOdd
	{
		bool operator()(int n)
		{
			return n % 2 != 0;
		}
	};

	std::remove_if(v.begin(), v.end(), IsOdd());
	// 결과? 
	// 원하는 결과는 4 8 2 이지만
	// 실제 결과는 4 8 2 5 8 2 <- 대체 왜..? 그냥 받아 들여라 더러운 코드..

	save("cpp.cpp");
}


==========================================================================


#include <iostream>
#include <algorithm>
#include "save.h"
using namespace std;

// find <<
// find_if <<

// count <<
// count_if <<

// all_of
// any_of
// none_of

// for_each <<

// 굉장히 주의해야 하는 함수
// remove
// remove_if <<		erase와 짝꿍!

int main()
{
	vector<int> v = { 1,4,3,5,8,2 };

	// 홀수인 데이터를 일괄 삭제

	// 방법 1
	for (auto it = v.begin(); it != v.end();)
	{
		// 이렇게 까다로운 방법으로 삭제..
		if (*it % 2 != 0)
			it = v.erase(it);
		else
			it++;
	}
	
	// 방법 2
	struct IsOdd
	{
		bool operator()(int n)
		{
			return n % 2 != 0;
		}
	};

	auto it = std::remove_if(v.begin(), v.end(), IsOdd());
	// 결과? 
	// 원하는 결과는 4 8 2 이지만
	// 실제 결과는 4 8 2 5 8 2 <- 대체 왜..? 그냥 받아 들여라 더러운 코드..
	// 벡터 v의 데이터를 지우는 건데, 그걸 별도의 벡터에 받지 않고, 본인에게 덮어 써서..
	// 뒤에는 알아서 정리해야 함
	v.erase(it, v.end());
	
	// 한 번에 하려면
	//v.erase(std::remove_if(v.begin(), v.end(), IsOdd()));
	
	// -> remove_if는 erase와 짝꿍이다!!!!!!!!!!! 
	// 실수하는 사람 엄청 많음!!!!!!!!!!!

	save("cpp.cpp");
}
