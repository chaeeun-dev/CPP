

==========================================================================


#include <iostream>
#include <algorithm>
#include "save.h"
using namespace std;

// 코딩 테스트에서 sort 문제 자주 출제

void BubbleSort(vector<int>& v)
{
	const int n = v.size();

	// O(N^2)                                                      
	for (int i = 0; i < n - 1; ++i)
	{
		for (int j = 0; j < n - 1 - i; ++j)		// n - 1 - i <- 한 턴 끝날 때마다 끝 정렬 완료
		{
			if (v[j] < v[j + 1])
				swap(v[j], v[j + 1]);
		}
	}
}

// 1 5 3 4 2  순차적으로 골라감
// 1
// 1 2
// 1 2 3
// 1 2 3 4
// 1 2 3 4 5
void SelectionSort(vector<int>& v)
{
	const int n = v.size();
	
	// O(N^2)
	for (int i = 0; i < n - 1; ++i)
	{
		int bestIndex = i; 

		for (int j = i + 1; j < n; j++)
		{
			if (v[i] < v[bestIndex])
				bestIndex = j;
		}

		if (i != bestIndex)
			swap(v[i], v[bestIndex]);
	}
}

int main()
{
	vector<int> v{ 1, 5, 3, 4, 2 };

	save("cpp.cpp");
}
 

==========================================================================


#include <iostream>
#include <algorithm>
#include <queue>
#include "save.h"
using namespace std;

// 코딩 테스트에서 sort 문제 자주 출제

// O(NlogN)
void HeapSort(vector<int>& v)
{
	priority_queue<int, vector<int>, greater<int>> pq;

	// O(NlogN)
	for (int num : v)
	{
		pq.push(num); // 데이터를 넣을 때 O(logN)
	}
	
	v.clear();

	while (!pq.empty())
	{
		v.push_back(pq.top());	// O(1)
		pq.pop();	// O(logN)
	}
}

int main()
{
	vector<int> v{ 1, 5, 3, 4, 2 };

	HeapSort(v);

	save("cpp.cpp");
}
 

==========================================================================


#include <iostream>
#include <algorithm>
#include <queue>
#include "save.h"
using namespace std;

// 코딩 테스트에서 sort 문제 자주 출제

// 병합 정렬 - 크래프톤 코딩 시험에 나옴
// 분할 정복 (Divide and Conquer)
// - 분할(Divide)		문제를 더 단순하게 분할한다
// - 정복(Conquer)		분할된 문제를 해결한다
// - 결합(Combine)		결과를 취합하여 마무리한다

// [3][K][7][2][J][4][8][9]
// [3][K][7][2]  [J][4][8][9]
// [3][K]  [7][2]  [J][4]  [8][9]
// [3] [K] [7] [2] [J] [4] [8] [9]
// [3][K]  [7][2]  [J][4]  [8][9]
// [2][3][7][K]  [4][8][8][J]

void MergeResult(vector<int>& v, int left, int mid, int right)
{
	int leftIdx = left;
	int rightIdx = mid + 1;

	vector<int> temp;

	while (leftIdx <= mid && rightIdx <= right)
	{
		if (v[leftIdx] <= v[rightIdx])
		{
			temp.push_back(v[left]);
			leftIdx++;
		}
		else
		{
			temp.push_back(v[rightIdx]);
			rightIdx++;
		}
	}

	if (leftIdx > mid)
	{
		while (rightIdx <= right)
		{
			temp.push_back(v[rightIdx]);
			rightIdx;
		}
	}
	else
	{
		while (leftIdx <= mid)
		{
			temp.push_back(v[leftIdx]);
			leftIdx++;
		}
	}

	for (int i = 0; i < temp.size(); ++i)
	{
		v[left + i] = temp[i];
	}
}

void MergeSort(vector<int>& v, int left, int right)
{
	if (left >= right)
		return;

	// 분할 mid 기준으로 왼 오 나눔
	int mid = (left + right) / 2;

	MergeSort(v, left, mid);
	MergeSort(v, mid + 1, right);
}

int main()
{
	vector<int> v{ 1, 5, 3, 4, 2 };

	MergeSort(v, 0, v.size() - 1);

	save("cpp.cpp");
}

// 전체 과정 
// [1, 5, 3, 4, 2]			 
// [1, 5, 3] [4, 2]			mid = (0 + 4) / 2 = 2
// [1, 5] [3] [4, 2]		mid = (0 + 2) / 2 = 1
// [1] [5] [3] [4, 2]		mid = (0 + 1) / 2 = 0, 이제 병합 MergeResult
// [1, 3, 5] [4, 2]			mid = (3 + 4) / 2 = 3
// [1, 3, 5] [4] [2]		병합
// [1, 3, 5] [2, 4]			최종 병합
// [1, 2, 3, 4, 5]