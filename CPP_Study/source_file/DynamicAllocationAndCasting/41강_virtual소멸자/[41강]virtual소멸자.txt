

==========================================================================
fileName ::, 2024-07-22 ������ ���� 10:11:20
==========================================================================


﻿#include <iostream>
#include "save.h"

// 이번 수업의 핵심은 소멸자!
class Player
{
public:
	Player()
	{
		std::cout << "Player()" << std::endl;
	}
	~Player() 
	{
		std::cout << "~Player()" << std::endl;
	}
};

class Pet
{

};

class Archer : public Player
{
public:
	Archer()
	{
		_pet = new Pet();
	}
	
	~Archer() 
	{
		std::cout << "~Archer()" << std::endl;
		delete _pet;
	}
	
	
private:
	Pet* _pet;
};

int main()
{

	save("RPGGAME.cpp");
}



==========================================================================
fileName ::, 2024-07-22 ������ ���� 10:13:34
==========================================================================


﻿#include <iostream>
#include "save.h"

// 이번 수업의 핵심은 소멸자!
class Player
{
public:
	Player()
	{
		std::cout << "Player()" << std::endl;
	}
	~Player() 
	{
		std::cout << "~Player()" << std::endl;
	}
};

class Pet
{

};

class Archer : public Player
{
public:
	Archer()
	{
		_pet = new Pet();
		std::cout << "Archer()" << std::endl;
	}
	
	~Archer() 
	{
		std::cout << "~Archer()" << std::endl;
		delete _pet;
	}
	
	
private:
	Pet* _pet;
};

int main()
{
	Archer* archer = new Archer();
	delete archer;

	save("RPGGAME.cpp");
}

// 출력 결과
Player()
Archer()
~Archer()
~Player()


==========================================================================
fileName ::, 2024-07-22 ������ ���� 10:24:25
==========================================================================


﻿#include <iostream>
#include "save.h"

// 이번 수업의 핵심은 소멸자!
class Player
{
public:
	Player()
	{
		std::cout << "Player()" << std::endl;
	}
	~Player() 
	{
		std::cout << "~Player()" << std::endl;
	}
};

class Pet
{

};

class Archer : public Player
{
public:
	Archer()
	{
		_pet = new Pet();
		std::cout << "Archer()" << std::endl;
	}
	
	~Archer() 
	{
		std::cout << "~Archer()" << std::endl;
		delete _pet;
	}
	
	
private:
	Pet* _pet;
};

int main()
{
	Player* player = new Archer();
	delete player;

	save("RPGGAME.cpp");
}

// 출력 결과
Player()
Archer()
~Player()

==========================================================================
fileName ::, 2024-07-22 ������ ���� 10:43:07
==========================================================================


﻿#include <iostream>
#include "save.h"

// 이번 수업의 핵심은 소멸자!
class Player
{
public:
	Player()
	{
		std::cout << "Player()" << std::endl;
	}
	virtual ~Player() 
	{
		std::cout << "~Player()" << std::endl;
	}
};

class Pet
{

};

class Archer : public Player
{
public:
	Archer()
	{
		_pet = new Pet();
		std::cout << "Archer()" << std::endl;
	}
	
	~Archer() 
	{
		std::cout << "~Archer()" << std::endl;
		delete _pet;
	}
	
	
private:
	Pet* _pet;
};

int main()
{

	Player* player = new Archer();
	delete player;

	save("RPGGAME.cpp");
}
// 출력 결과
Player()
Archer()
~Archer()
~Player()
virtual을 붙였으니 자식 클래스에 대한 소멸자가 제대로 호출된다!