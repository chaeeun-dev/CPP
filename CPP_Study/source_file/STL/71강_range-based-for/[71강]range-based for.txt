

==========================================================================


#include <iostream>
#include <vector>
#include <queue>
#include <list>
#include "save.h"
using namespace std;


int main()
{
	// ranged-based for

	vector<int> v{ 1,2,3,4,5 };

	for (int i = 0; i < v.size(); ++i)
	{
		int data = v[i];
		cout << data << endl;
	}

	for (auto it = v.begin(); it != v.end(); ++it)
	{
		int data = *it;
		cout << data << endl;
	}

	for (int data : v)
	{
		cout << data << endl;
	}
	save("cpp.cpp");
}


==========================================================================


#include <iostream>
#include <vector>
#include <queue>
#include <list>
#include "save.h"
using namespace std;


int main()
{
	// ranged-based for

	vector<int> v{ 1,2,3,4,5 };


	// 데이터를 수정하고 싶을 때?

	for (int i = 0; i < v.size(); ++i)
	{
		v[i] = 100;
		cout << v[i] << endl;
	}

	for (auto it = v.begin(); it != v.end(); ++it)
	{
		*it = 100;
		cout << *it << endl;
	}

	for (int& data : v)		// & 레퍼런스를 붙이면 됨, 복사 말고 참조
	{
		cout << data << endl;
	}

	save("cpp.cpp");
}


==========================================================================


#include <iostream>
#include <vector>
#include <queue>
#include <list>
#include "save.h"
using namespace std;

struct ItemInfo
{

};

int main()
{
	// ranged-based for

	vector<ItemInfo> v;

	for (auto& data : v)
	{

	}

	save("cpp.cpp");
}


==========================================================================


#include <iostream>
#include <vector>
#include <queue>
#include <list>
#include "save.h"
using namespace std;

class Iterator
{
public:
	Iterator() : _data(nullptr) { }
	Iterator(int* data) : _data(data) { }

	bool operator==(const Iterator& other)
	{
		return _data == other._data;
	}

	bool operator!=(const Iterator& other)
	{
		return _data != other._data;
	}

	void operator++()
	{
		_data++;
	}

	int& operator*()
	{
		return *_data;
	}

public:
	int* _data;
};

class Inventory
{
public:
	using iterator = Iterator;

	iterator begin() { return iterator(&_items[0]); }
	iterator end() { return iterator(&_items[10]); }

	int _items[10] = { 1,2,3,4,5,6,7,8,9,10 };
};

int main()
{
	Inventory inventory;

	for (auto item : inventory)
	{
		cout << item << endl;
	}


	save("cpp.cpp");
}


==========================================================================


#include <iostream>
#include <vector>
#include <queue>
#include <list>
#include "save.h"
using namespace std;

class Iterator
{
public:
	Iterator() : _data(nullptr) { }
	Iterator(int* data) : _data(data) { }

	bool operator==(const Iterator& other)
	{
		return _data == other._data;
	}

	bool operator!=(const Iterator& other)
	{
		return _data != other._data;
	}

	void operator++()
	{
		_data++;
	}

	int& operator*()
	{
		return *_data;
	}

public:
	int* _data;
};

class Inventory
{
public:
	using iterator = Iterator;

	iterator begin() { return iterator(&_items[0]); }
	iterator end() { return iterator(&_items[10]); }

	int _items[10] = { 1,2,3,4,5,6,7,8,9,10 };
};

int main()
{
	Inventory inventory;

	// 모든 데이터를 순회할 때! 데이터를 건드리면 안 된다..(빼거나 넣거나)
	for (auto item : inventory)
	{
		cout << item << endl;
	}

	// 겉으로 보일 때는 간단하지만
	//for (auto it = v.begin(); it != v.end(); ++it)
	//{
	//	*it = 100;
	//	cout << *it << endl;
	//}
	// 실제로는 이런 식으로 돌아가는 코드

	save("cpp.cpp");
}
