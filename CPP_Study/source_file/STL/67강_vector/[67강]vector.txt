

==========================================================================


#include <iostream>
#include <vector>
#include <queue>
#include "save.h"

using namespace std;

int main()
{
	vector<int> v{ 1, 2, 3, 4, 5 };
	// size (resize)
	// capacity (reserve)
	// 삽입/삭제
	// - 시작	O(N)	
	// - 중간	O(N) 
	// - 끝		O(1)	
	// push_back, front, back
	// 임의 접근 v[i]
	// v.remove(10)?

	// Q. vector에서 size와 capacity의 차이는?
	// size는 실제 데이터 크기, capacity는 할당된 공간

	// v.reserve(10);	// 예약하는 이유? 이사 비용, 데이터 파편화 등
	
	v.push_back(10);
	v.push_back(20);
	v.push_back(30);

	int a = v.front();	// O(1)
	int b = v.back();	// O(1)
	save("cpp.cpp");
}

==========================================================================


#include <iostream>
#include <vector>
#include <queue>
#include "save.h"

using namespace std;

int main()
{
	vector<int> v{ 1, 2, 3, 4, 5 };
	// size (resize)
	// capacity (reserve)
	// 삽입/삭제
	// - 시작	O(N)	
	// - 중간	O(N) 
	// - 끝		O(1)	
	// push_back, front, back
	// 임의 접근 v[i]
	// v.remove(10)?

	// 추가
	// 삭제
	// 순회
	// 검색

	for (int i = 0; i < v.size(); ++i)
	{
		cout << v[i] << endl;
	}

	save("cpp.cpp");
}

==========================================================================


#include <iostream>
#include <vector>
#include <queue>
#include "save.h"

using namespace std;

int main()
{
	vector<int> v{ 1, 2, 3, 4, 5 };
	// size (resize)
	// capacity (reserve)
	// 삽입/삭제
	// - 시작	O(N)	
	// - 중간	O(N) 
	// - 끝		O(1)	
	// push_back, front, back
	// 임의 접근 v[i]
	// v.remove(10)?

	// 추가
	// 삭제
	// 순회
	// 검색
	
	// 초기화
	vector<int> v1(5);
	vector<int> v2(5, -1);
	vector<int> v3{ 1, 2, 3, 4, 5 };

	vector<int> v4 = v3;
	v4[0] = 100;	// v4만 바뀜 복사가 되니까

	save("cpp.cpp");
}

==========================================================================


#include <iostream>
#include <vector>
#include <queue>
#include "save.h"

using namespace std;

int main()
{
	// size (resize)
	// capacity (reserve)
	// 삽입/삭제
	// - 시작	O(N)	
	// - 중간	O(N) 
	// - 끝		O(1)	
	// push_back, front, back
	// 임의 접근 v[i]
	// v.remove(10)?

	// 추가
	// 삭제
	// 순회
	// 검색

	vector<int> v{ 1, 2, 3, 4, 5 };
	v.clear();

	cout << v.size() << endl;
	cout << v.capacity() << endl;

	save("cpp.cpp");
}



==========================================================================


#include <iostream>
#include <vector>
#include <queue>
#include "save.h"

using namespace std;

int main()
{
	// size (resize)
	// capacity (reserve)
	// 삽입/삭제
	// - 시작	O(N)	
	// - 중간	O(N) 
	// - 끝		O(1)	
	// push_back, front, back
	// 임의 접근 v[i]
	// v.remove(10)?

	// 추가
	// 삭제
	// 순회
	// 검색

	{
		// iterator? 반복자 포인터?
		vector<int> v{ 1, 2, 3, 4, 5 };

		int* ptr = &v[0];
		int value = *ptr;

		// 다음 데이터로(4바이트씩)
		ptr++;
		cout << *ptr << endl;

		// 다다음 데이터로
		ptr += 2;
		cout << *ptr << endl;
	}

	save("cpp.cpp");
}

==========================================================================


#include <iostream>
#include <vector>
#include <queue>
#include "save.h"

using namespace std;

int main()
{
	// size (resize)
	// capacity (reserve)
	// 삽입/삭제
	// - 시작	O(N)	
	// - 중간	O(N) 
	// - 끝		O(1)	
	// push_back, front, back
	// 임의 접근 v[i]
	// v.remove(10)?

	// 추가
	// 삭제
	// 순회
	// 검색

	{
		// iterator? 반복자 포인터?
		vector<int> v{ 1, 2, 3, 4, 5 };

		int* ptr = &v[0];
		int* ptrEnd = &v[4] + 1;
	
		while (ptr != ptrEnd)
		{
			cout << *ptr << endl;
			ptr++;
		}
	}

	save("cpp.cpp");
}

==========================================================================


#include <iostream>
#include <vector>
#include <queue>
#include "save.h"

using namespace std;

int main()
{
	// size (resize)
	// capacity (reserve)
	// 삽입/삭제
	// - 시작	O(N)	
	// - 중간	O(N) 
	// - 끝		O(1)	
	// push_back, front, back
	// 임의 접근 v[i]
	// v.remove(10)?

	// 추가
	// 삭제
	// 순회
	// 검색

	{
		vector<int> v{ 1, 2, 3, 4, 5 };

		vector<int>::iterator it = v.begin();
		vector<int>::iterator itEnd = v.end();

		while (it != itEnd)
		{
			cout << *it << endl;
			it++;
		}
	}

	save("cpp.cpp");
}

==========================================================================


#include <iostream>
#include <vector>
#include <queue>
#include "save.h"

using namespace std;

int main()
{
	// size (resize)
	// capacity (reserve)
	// 삽입/삭제
	// - 시작	O(N)	
	// - 중간	O(N) 
	// - 끝		O(1)	
	// push_back, front, back
	// 임의 접근 v[i]
	// v.remove(10)?

	// 추가
	// 삭제
	// 순회
	// 검색

	{
		vector<int> v{ 1, 2, 3, 4, 5 };


		// 3을 찾고 싶어
		vector<int>::iterator it;
		for (it = v.begin(); it < v.end(); it++)
		{
			int data = *it;
			if (data == 3)
				break;
		}

		if (it != v.end())
		{
			cout << "3 찾았다" << endl;
		}
	}

	save("cpp.cpp");
}



==========================================================================


#include <iostream>
#include <vector>
#include <queue>
#include "save.h"

using namespace std;

int main()
{
	// size (resize)
	// capacity (reserve)
	// 삽입/삭제
	// - 시작	O(N)	
	// - 중간	O(N) 
	// - 끝		O(1)	
	// push_back, front, back
	// 임의 접근 v[i]
	// v.remove(10)?

	// 추가
	// 삭제
	// 순회
	// 검색

	{
		vector<int> v{ 1, 2, 3, 4, 5 };

		for (vector<int>::iterator it = v.begin(); it != v.end(); it++)
		{
			int value = *it;
			if (value % 2 == 0)
				v.erase(it);	// 함정) erase는 포인터를 반환하기 때문..
		}

		for (vector<int>::iterator it = v.begin(); it != v.end(); it++)
		{
			cout << *it << endl;
		}
	}

	save("cpp.cpp");
}

==========================================================================


#include <iostream>
#include <vector>
#include <queue>
#include "save.h"

using namespace std;

int main()
{
	// size (resize)
	// capacity (reserve)
	// 삽입/삭제
	// - 시작	O(N)	
	// - 중간	O(N) 
	// - 끝		O(1)	
	// push_back, front, back
	// 임의 접근 v[i]
	// v.remove(10)?

	// 추가
	// 삭제
	// 순회
	// 검색

	{
		vector<int> v{ 1, 2, 3, 4, 5 };

		for (vector<int>::iterator it = v.begin(); it != v.end(); it++)
		{
			int value = *it;
			if (value % 2 == 0)
				it = v.erase(it);	// 이렇게 it에 받아줘야함
		}

		for (vector<int>::iterator it = v.begin(); it != v.end(); it++)
		{
			cout << *it << endl;
		}
	}

	save("cpp.cpp");
}

==========================================================================


#include <iostream>
#include <vector>
#include <queue>
#include "save.h"

using namespace std;

int main()
{
	// size (resize)
	// capacity (reserve)
	// 삽입/삭제
	// - 시작	O(N)	
	// - 중간	O(N) 
	// - 끝		O(1)	
	// push_back, front, back
	// 임의 접근 v[i]
	// v.remove(10)?

	// 추가
	// 삭제
	// 순회
	// 검색

	{
		vector<int> v{ 1, 2, 3, 4, 5 };

		// 순회하면서 삭제하는 경우 if else 중요!!!
		for (vector<int>::iterator it = v.begin(); it != v.end();)
		{
			int value = *it;
			if (value % 2 == 0)
				it = v.erase(it);
			else
				it++;
		}

		for (vector<int>::iterator it = v.begin(); it != v.end(); it++)
		{
			cout << *it << endl;
		}
	}

	save("cpp.cpp");
}